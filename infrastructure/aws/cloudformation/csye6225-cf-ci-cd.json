{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Description" : "csye6225 spring2018 updated for assignment 9",
    "Resources" : {

      "RoleForCodeDeployEC2Service":{
         "Type":"AWS::IAM::Role",
         "Properties":{
            "AssumeRolePolicyDocument": {
               "Version":"2012-10-17",
               "Statement":[ {
                     "Effect":"Allow",
                     "Principal":{
                        "Service":[
                           "ec2.amazonaws.com"
                        ]
                     },
                     "Action":[ "sts:AssumeRole" ]
               } ]
            },
            "Path":"/",
            "RoleName" : "CodeDeployEC2ServiceRole"
         }
      },

      "RoleForCodeDeployService": {
         "Type":"AWS::IAM::Role",
         "Properties":{
            "RoleName": "CodeDeployServiceRole",
            "AssumeRolePolicyDocument":{
               "Version":"2012-10-17",
               "Statement": [ {
                   "Effect":"Allow",
                   "Principal":{
                      "Service":[
                         "codedeploy.amazonaws.com"
                      ]
                   },
                   "Action":[ "sts:AssumeRole" ]
               } ]
            },
            "Path":"/",
            "ManagedPolicyArns": [
                "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"
            ]
        }
      },

        "CodeDeployEC2S3Policy" : {
           "Type" : "AWS::IAM::Policy",
           "Properties":{
              "PolicyName":"CodeDeploy-EC2-S3",
              "PolicyDocument":{
                 "Version":"2012-10-17",
                 "Statement":[
                   {
                     "Action" : [
                        "s3:*"
                     ],
                     "Effect":"Allow",
                     "Resource" : "*"
                   },
                   {
                     "Action" : [
                        "sns:*"
                     ],
                     "Effect" : "Allow",
                     "Resource" : "*"
                   }
                 ]
              },
              "Roles":[
                { "Ref" : "RoleForCodeDeployEC2Service" }
              ]
           }
        },

        "TravisUploadToS3Policy":{
           "Type":"AWS::IAM::ManagedPolicy",
           "Properties" : {
              "ManagedPolicyName" : "Travis-Upload-To-S3",
              "PolicyDocument" : {
                 "Version" : "2012-10-17",
                 "Statement" : [ {
                     "Action" : [
                         "s3:PutObject"
                     ],
                     "Effect" : "Allow",
                     "Resource" : [ "*" ]
                 } ]
              },
              "Users" : [ { "Ref" : "UserFromTravis" } ]
           }
        },

        "TravisCodeDeployPolicy" : {
           "Type":"AWS::IAM::ManagedPolicy",
           "Properties":{
              "ManagedPolicyName":"Travis-Code-Deploy",
              "PolicyDocument":{
                 "Version": "2012-10-17",
                 "Statement": [
                   {
                     "Effect": "Allow",
                     "Action": [
                       "codedeploy:RegisterApplicationRevision",
                       "codedeploy:GetApplicationRevision"
                     ],
                     "Resource": {
                       "Fn::Join" : [ "",
                         [
                            "arn:aws:codedeploy:us-east-1:",
                            { "Ref" : "AWS::AccountId" },
                            ":application:",
                            { "Ref" : "CodeDeployAppName" }
                         ]
                       ]
                     }
                   },
                   {
                     "Effect": "Allow",
                     "Action": [
                       "codedeploy:CreateDeployment",
                       "codedeploy:GetDeployment"
                     ],
                     "Resource": [
                       "*"
                     ]
                   },
                   {
                     "Effect": "Allow",
                     "Action": [
                       "codedeploy:GetDeploymentConfig"
                     ],
                     "Resource": [
                          {
                            "Fn::Join": [ "",
                                [ "arn:aws:codedeploy:us-east-1:",{ "Ref": "AWS::AccountId" },":deploymentconfig:CodeDeployDefault.OneAtATime" ]
                            ]
                          },
                          {
                            "Fn::Join": [ "",
                                [ "arn:aws:codedeploy:us-east-1:", { "Ref": "AWS::AccountId" }, ":deploymentconfig:CodeDeployDefault.HalfAtATime" ]
                            ]
                          },
                          {
                            "Fn::Join": [ "",
                                [ "arn:aws:codedeploy:us-east-1:", { "Ref": "AWS::AccountId" }, ":deploymentconfig:CodeDeployDefault.AllAtOnce" ]
                            ]
                          }
                     ]
                   }
                 ]
              },
              "Users" : [ { "Ref" : "UserFromTravis" } ]
           }
        },



        "CloudWatchPolicy": {
      			"Type": "AWS::IAM::ManagedPolicy",
      			"Properties": {
      				"Roles": [
                  { "Ref" : "RoleForCodeDeployService" },
                  { "Ref" : "RoleForLambda" }
              ],
      				"ManagedPolicyName": "CloudWatch-Policy",
      				"PolicyDocument": {
      					"Version": "2012-10-17",
      					"Statement": [
                  {
        						"Effect": "Allow",
        						"Action": [
        							"logs:CreateLogGroup",
        							"logs:CreateLogStream",
        							"logs:PutLogEvents",
        							"logs:DescribeLogStreams"
        						],
        						"Resource": [
                      "arn:aws:logs:*:*:*"
        						]
      					  }
                ]
      				}
      		 }
      	},

        "S3BucketForCodeDeploy" : {
          	"Type": "AWS::S3::Bucket",
          	"Properties" : {
          	   "BucketName" : { "Ref" : "CodeDeployS3BucketName" }
            }
      	},

        "CodeDeployApplication": {
            "Type": "AWS::CodeDeploy::Application",
            "Properties" : {
                "ApplicationName" : { "Ref" : "CodeDeployAppName" },
                "ComputePlatform" : "Server"
            }
        },

        "DeploymentGroup" : {
            "Type" : "AWS::CodeDeploy::DeploymentGroup",
            "Properties" : {
                "ApplicationName" : { "Ref" : "CodeDeployAppName" },
                "DeploymentConfigName" : "CodeDeployDefault.AllAtOnce",
                "DeploymentStyle": {
          					"DeploymentOption": "WITHOUT_TRAFFIC_CONTROL",
          					"DeploymentType": "IN_PLACE"
        				},
                "AutoScalingGroups" : [
                    { "Ref" : "MyAutoScalingGroup" }
                ],
                "DeploymentGroupName": {
                    "Ref" : "NameOfDeploymentGroup"
                },
                "Ec2TagFilters" : [
                   {
                      "Key" : { "Ref" : "TagKey" },
                      "Value" : { "Ref" : "TagValue" },
                      "Type" : "KEY_AND_VALUE"
                   }
                ],
                "ServiceRoleArn" : { "Fn::GetAtt" : [ "RoleForCodeDeployService", "Arn" ] }
            },
            "DependsOn": [
              "CodeDeployApplication"
            ]
        },

        "MyAutoScalingGroup": {
          "Type": "AWS::AutoScaling::AutoScalingGroup",
          "Properties": {
              "AutoScalingGroupName": "MyAutoScalingGroup",
              "Cooldown" : "60",
              "DesiredCapacity" : "3",
              "VPCZoneIdentifier" : [
                  { "Ref" : "EC2SubnetId" },
                  { "Ref" : "EC2Subnet2Id" }
              ],
              "LaunchConfigurationName": { "Ref" : "ASLaunchConfig" },
              "MinSize": "3",
              "MaxSize": "7",
              "TargetGroupARNs": [
                  {"Ref": "ALBTargetGroup"}
              ],
              "Tags": [
                {
                  "ResourceType": "auto-scaling-group",
                  "ResourceId": "MyAutoScalingGroup",
                  "Key": "name",
                  "Value": "csye6225-MyAutoScalingGroup",
                  "PropagateAtLaunch" : "true"
                }
              ]
          }
        },

        "ALBTargetGroup": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "Tags": [
                  { "Key": "name", "Value": "csye6225-ALBTargetGroup" }
                ],
                "Name" : "csye6225TargetGroup",
                "TargetType" : "instance",
                "Port" : 8080,
                "Protocol" : "HTTP",
                "VpcId" : { "Ref": "vpcId" },
                "TargetGroupAttributes": [
                  {
                    "Key": "stickiness.enabled",
                    "Value": true
                  }
                ]
            }
        },

        "WebServerScaleUpPolicy": {
          "Type": "AWS::AutoScaling::ScalingPolicy",
          "Properties": {
            "AdjustmentType": "ChangeInCapacity",
            "AutoScalingGroupName": {
              "Ref": "MyAutoScalingGroup"
            },
            "Cooldown": "60",
            "ScalingAdjustment": "1"
          }
        },

        "WebServerScaleDownPolicy": {
          "Type": "AWS::AutoScaling::ScalingPolicy",
          "Properties": {
            "AdjustmentType": "ChangeInCapacity",
            "AutoScalingGroupName": {
              "Ref": "MyAutoScalingGroup"
            },
            "Cooldown": "60",
            "ScalingAdjustment": "-1"
          }
        },

        "CPUAlarmHigh": {
          "Type": "AWS::CloudWatch::Alarm",
          "Properties": {
            "AlarmDescription": "Scale-up if CPU > 10% for 4 minutes",
            "MetricName": "CPUUtilization",
            "Namespace": "AWS/EC2",
            "Statistic": "Average",
            "Period": "120",
            "EvaluationPeriods": "2",
            "Threshold": "10",
            "AlarmActions": [
              {
                "Ref": "WebServerScaleUpPolicy"
              }
            ],
            "Dimensions": [
              {
                "Name": "AutoScalingGroupName",
                "Value": {
                  "Ref": "MyAutoScalingGroup"
                }
              }
            ],
            "ComparisonOperator": "GreaterThanThreshold"
          }
        },

        "CPUAlarmLow": {
          "Type": "AWS::CloudWatch::Alarm",
          "Properties": {
            "AlarmDescription": "Scale-down if CPU < 8% for 10 minutes",
            "MetricName": "CPUUtilization",
            "Namespace": "AWS/EC2",
            "Statistic": "Average",
            "Period": "300",
            "EvaluationPeriods": "2",
            "Threshold": "8",
            "AlarmActions": [
              {
                "Ref": "WebServerScaleDownPolicy"
              }
            ],
            "Dimensions": [
              {
                "Name": "AutoScalingGroupName",
                "Value": {
                  "Ref": "MyAutoScalingGroup"
                }
              }
            ],
            "ComparisonOperator": "LessThanThreshold"
          }
        },

        "ASLaunchConfig" : {
            "Type":"AWS::AutoScaling::LaunchConfiguration",
            "Properties" : {
               "ImageId" : { "Ref" : "ImageIdOfEC2Instance" },
               "InstanceType" : { "Ref" : "TypeOfEC2Instance" },
               "KeyName" : { "Ref" : "ExistingKeyPairName" },
               "AssociatePublicIpAddress" : true,
               "SecurityGroups": [{"Ref" : "WebServerSecurityGroupId"}],
               "BlockDeviceMappings" : [
                 {
                     "DeviceName" : "/dev/sdf",
                     "Ebs" : {
                        "VolumeType" : { "Ref" : "EC2VolumeType" },
                        "DeleteOnTermination" : true,
                        "VolumeSize" : { "Ref" : "EC2VolumeSize" }
                     }
                 }
               ],
               "UserData": {
                   "Fn::Base64": {
                       "Fn::Join": [
                           "\n",
                           [
                               "#!/bin/bash -xe ",
                               "sudo apt-get update ",
                               "sudo apt-get install openjdk-8-jdk -y",
                               "sudo apt-get install ruby -y ",
                               "sudo apt-get install wget -y ",
                               "sudo apt-get install python -y ",
                               "sudo apt-get install mysql-client -y",
                               "sudo apt-get update ",
                               "sudo wget https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install ",
                               "sudo chmod +x ./install ",
                               "sudo ./install auto ",
                               "sudo service codedeploy-agent start ",
                               "sudo apt-get install tomcat8 -y ",
                               {
                                  "Fn::Join": [
                                     "",
                                     [
                                       "echo 'JAVA_OPTS=\"${JAVA_OPTS} -Dspring.datasource.url=\\\"jdbc:mysql://",
                                       { "Fn::GetAtt" : [ "MyDBInstance", "Endpoint.Address" ] },
                                       ":3306/csye6225\\\"\"' >> /etc/default/tomcat8 \n"
                                     ]
                                  ]
                               },
                               {
                                 "Fn::Join": [
                                    "",
                                    [
                                      "echo 'JAVA_OPTS=\"${JAVA_OPTS} -Dspring.datasource.username=",
                                      { "Ref" : "rdsParamUsername" },
                                      " -Dspring.datasource.password=",
                                      { "Ref" : "rdsParamPassword" },
                                      " -Dspring.profiles.active=aws",
                                      "\"' >> /usr/share/tomcat8/bin/setenv.sh"
                                    ]
                                 ]
                               },
                               "sudo service tomcat8 restart",

                              "sudo apt-get update",
                              "sudo touch /home/ubuntu/awslogs.conf",
                              "cd /home/ubuntu/",
                              "sudo echo '[general]' > awslogs.conf",
                              "sudo echo 'state_file= /var/awslogs/agent-state' >> awslogs.conf",
                              "sudo echo '[logstream1]' >> awslogs.conf",
                              "sudo echo 'file = /var/log/tomcat8/csye6225-aws.log' >> awslogs.conf",
                              "sudo echo 'log_group_name = ",
                              { "Ref": "WebServerLogGroup" },
                              "' >> awslogs.conf",
                              "sudo echo 'log_stream_name = csye6225-webapp' >> awslogs.conf",
                              "sudo echo 'datetime_format = %d/%b/%Y:%H:%M:%S' >> awslogs.conf",
                              "curl https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py -O",
                              {
                                  "Fn::Join": [
                                      " ",
                                      [
                                          "sudo python ./awslogs-agent-setup.py -n -r",
                                          {
                                              "Ref": "AWS::Region"
                                          },
                                          "-c /home/ubuntu/awslogs.conf || error_exit 'Failed to run CloudWatch Logs agent setup'"
                                      ]
                                  ]
                              },


                              "cd /etc/systemd/system",
                              "sudo touch awslogs.service",
                              "sudo echo '[Unit]' >> awslogs.service",
                              "sudo echo 'Description=Service for CloudWatch Logs agent' >> awslogs.service",
                              "sudo echo 'After=rc-local.service' >> awslogs.service",
                              "sudo echo '[Service]' >> awslogs.service",
                              "sudo echo 'Type=simple' >> awslogs.service",
                              "sudo echo 'Restart=always' >> awslogs.service",
                              "sudo echo 'KillMode=process' >> awslogs.service",
                              "sudo echo 'TimeoutSec=infinity' >> awslogs.service",
                              "sudo echo 'PIDFile=/var/awslogs/state/awslogs.pid' >> awslogs.service",
                              "sudo echo 'ExecStart=/var/awslogs/bin/awslogs-agent-launcher.sh --start --background --pidfile $PIDFILE --user awslogs --chuid awslogs &amp;' >> awslogs.service",
                              "sudo echo '[Install]' >> awslogs.service",
                              "sudo echo 'WantedBy=multi-user.target' >> awslogs.service",
                              "sudo systemctl start awslogs.service",
                              "sudo systemctl enable awslogs.service"

                           ]
                       ]
                   }
               },
               "IamInstanceProfile": { "Ref" : "CodeDeployEC2ServiceRoleInsProfile" }
            }
        },

        "WebServerLogGroup":{
           "Type" : "AWS::Logs::LogGroup",
           "Properties" : {
              "RetentionInDays" : 7
           }
        },

        "CodeDeployEC2ServiceRoleInsProfile": {
      			"Type": "AWS::IAM::InstanceProfile",
      			"Properties": {
      				"Path": "/",
      				"Roles":[
                { "Ref" : "RoleForCodeDeployEC2Service" }
              ]
      			}
      	},

        "MyDBInstance" : {
          "Type" : "AWS::RDS::DBInstance",
          "Properties" : {
             "AllocatedStorage" : { "Ref" : "rdsParamStorageSize" },
             "DBName" : { "Ref" : "rdsParamDBName" },
             "Engine" : { "Ref" : "rdsParamEngine" },
             "EngineVersion" : { "Ref" : "rdsParamEngineVersion" },
             "DBInstanceClass" :  { "Ref" : "rdsParamDBInsClass" },
             "MultiAZ" : "FALSE",
             "DBInstanceIdentifier" : { "Ref" : "rdsParamDBInsId" },
             "MasterUsername" : {"Ref" : "rdsParamUsername"},
             "MasterUserPassword" : {"Ref" : "rdsParamPassword"},
             "PubliclyAccessible" : "FALSE",
             "DBSubnetGroupName": { "Ref" : "DBSubnetGroup" },
             "VPCSecurityGroups": [ { "Ref" : "RDSSecurityGroupId" } ]
           }
         },


        "RoleForLambda" : {
           "Type" : "AWS::IAM::Role",
           "Properties" : {
              "AssumeRolePolicyDocument" : {
                 "Version" : "2012-10-17",
                 "Statement" : [
                   {
                       "Effect" : "Allow",
                       "Principal" : {
                          "Service" : [
                             "lambda.amazonaws.com"
                          ]
                       },
                       "Action" : [
                          "sts:AssumeRole"
                       ]
                   }
                 ]
              },
              "ManagedPolicyArns": [
        					"arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      				],
              "Path" : "/",
              "RoleName": "lambdafunc-execution-role"
           }
        },

        "DynamoDBSESAccessPolicy" : {
            "Type" : "AWS::IAM::Policy",
            "Properties" : {
               "PolicyName" : "Lambda-Access-DynamoDB-SES-Policy",
               "PolicyDocument" : {
                  "Version" : "2012-10-17",
                  "Statement" : [
                    {
                      "Action" : [
                         "dynamodb:*"
                      ],
                      "Effect" : "Allow",
                      "Resource" : "*"
                    },
                    {
                      "Action" : [
                         "ses:*"
                      ],
                      "Effect" : "Allow",
                      "Resource" : "*"
                    }
                  ]
               },
               "Roles" : [
                 { "Ref" : "RoleForLambda" }
               ]
            }
        },

        "LambdaFuncInsProfile" : {
      			"Type" : "AWS::IAM::InstanceProfile",
      			"Properties": {
      				"Path" : "/",
      				"Roles" : [
                { "Ref" : "RoleForLambda" }
              ]
      			}
    		}

    },

    "Parameters" : {

      "UserFromTravis" : {
        "Description" : "User who uses TravisCI",
        "Type" : "String",
        "Default" : "travisUser"
      },

      "CodeDeployAppName" : {
        "Description" : "CodeDeploy Application Name",
        "Type" : "String",
        "Default" : "MyApplication"
      },

      "CodeDeployS3BucketName" : {
        "Description" : "S3 Bucket which is used by CodeDeploy",
        "Type" : "String",
        "Default" : "code-deploy.csye6225-spring2018-guju.me"
      },

      "NameOfDeploymentGroup" : {
        "Description" : "Deployment Group Name",
        "Type" : "String",
        "Default" : "MyApplication-deployment-group"
      },

      "TagKey" : {
        "Description" : " EC2 instance tag Key ",
        "Type" : "String",
        "Default" : " "
      },

      "TagValue" : {
        "Description" : " EC2 instance tag Value ",
        "Type" : "String",
        "Default" : " "
      },

      "ParamAutoScalingGroup" : {
        "Type" : "String",
        "Default" : " "
      },

      "EC2SubnetId" : {
        "Description" : "EC2 Subnet ID",
        "Type": "AWS::EC2::Subnet::Id",
        "Default" : " "
      },

      "EC2Subnet2Id" : {
        "Description" : "EC2 Subnet2 ID",
        "Type": "AWS::EC2::Subnet::Id",
        "Default" : " "
      },

      "vpcId" : {
        "Type" : "String",
        "Default" : " "
      },

      "rdsParamStorageSize" : {
        "Description" : "Allocated Storage for RDS",
        "Type" : "String",
        "Default" : "10"
      },

      "rdsParamDBName" : {
        "Description" : "DB Name for RDS",
        "Type" : "String",
        "Default" : "csye6225"
      },

      "rdsParamEngine" : {
        "Description" : "Engine Type for RDS DB",
        "Type" : "String",
        "Default" : "MySQL"
      },

      "rdsParamEngineVersion" : {
        "Description" : "Engine version for RDS DB",
        "Type" : "String",
        "Default" : "5.6.37"
      },

      "rdsParamDBInsClass" : {
        "Description" : "Instance Class for RDS DB",
        "Type" : "String",
        "Default" : "db.t2.medium"
      },

      "rdsParamDBInsId" : {
        "Description" : "Instance Identifier for RDS DB",
        "Type" : "String",
        "Default" : "RDS-csye6225-spring2018"
      },

      "rdsParamUsername" : {
        "Description": "database username",
        "Type" : "String",
        "Default" : "csye6225master"
      },

      "rdsParamPassword" : {
        "Description" : "database password",
        "Type" : "String",
        "Default" : "csye6225password"
      },

      "DBSubnetGroup" : {
        "Description" : "Group Name for RDS DataBase Subnet Group",
        "Type" : "String",
        "Default" : "RDSsubnet-group"
      },

      "RDSSecurityGroupId" : {
        "Description" : "Security Group ID of RDS",
        "Type": "AWS::EC2::SecurityGroup::Id",
        "Default" : " "
      },

      "rdsParamDBTagVal" : {
        "Description" : "Tag Value for RDS DB instance",
        "Type" : "String",
        "Default" : "csye6225MyDBInstance"
      },

      "ImageIdOfEC2Instance": {
        "Description" : "ImageId of EC2 Instance",
        "Type": "String",
        "Default" : " "
      },

      "WebServerSecurityGroupId" : {
        "Description" : "Group ID of Web Server Security Group",
        "Type": "AWS::EC2::SecurityGroup::Id",
        "Default" : " "
      },

      "ExistingKeyPairName" : {
        "Description" : "Attach an Existing Key Pair to the EC2 Instance",
        "Type" : "String",
        "Default" : " "
      },

      "EC2VolumeType" : {
        "Description" : "EC2 Volume type",
        "Type" : "String",
        "Default" : "gp2"
      },

      "EC2VolumeSize" : {
        "Description" : "EC2 Volume size",
        "Type" : "String",
        "Default" : "16"
      },

      "TypeOfEC2Instance": {
        "Description" : "InstanceType of EC2 Instance",
        "Type": "String",
        "Default" : "t2.micro"
      }
    }

}
